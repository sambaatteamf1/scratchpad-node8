{"version":3,"sources":["../server/cutRod.js"],"names":["_","L","reverse_L","reverse","P","costArr","costArr2","cutRod","n","nCost","each","length","index","iCost","Math","max","cutRod2","S","arr","Array","fill","map","x","i","size","maxCostForSize","k","console","log"],"mappings":";;AAAA;;IAAYA,C;;;;AAEZ,IAAIC,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EAA5B,CAAR;AACA,IAAIC,YAAYD,EAAEE,OAAF,EAAhB;AACA,IAAIC,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,CAAR;AACA,IAAIC,UAAU,EAAd;AACA,IAAIC,WAAW,EAAf;;AAEA,SAASC,MAAT,CAAgBC,CAAhB,EAAmB;AAClB;AACA,KAAIC,QAAQ,CAAZ;;AAEA;;AAEA,KAAID,KAAK,CAAT,EACC,OAAO,CAAP;;AAED,KAAIH,QAAQG,CAAR,KAAc,IAAd,IAAsBH,QAAQG,CAAR,IAAa,CAAvC,EAA0C;AACzC,SAAOH,QAAQG,CAAR,CAAP;AACA;;AAEDR,GAAEU,IAAF,CAAOT,CAAP,EAAU,UAASU,MAAT,EAAiBC,KAAjB,EAAwB;;AAEjC,MAAKJ,IAAIG,MAAL,GAAe,CAAnB,EAAuB;AACtB;AACA;;AAED;AACA,MAAIE,QAAQT,EAAEO,SAAO,CAAT,IAAcJ,OAAOC,IAAEG,MAAT,CAA1B;;AAEAF,UAAQK,KAAKC,GAAL,CAASN,KAAT,EAAgBI,KAAhB,CAAR;;AAEA;AACA,EAZD;;AAcAR,SAAQG,CAAR,IAAaC,KAAb;;AAEA,QAAOA,KAAP;AACA;;AAID,SAASO,OAAT,CAAiBR,CAAjB,EAAoB;AACnBF,UAAS,CAAT,IAAc,CAAd;AACA,KAAIW,IAAI,EAAR;;AAEA,KAAIC,MAAM,IAAIC,KAAJ,CAAUX,CAAV,EAAaY,IAAb,CAAkB,CAAlB,EAAqBC,GAArB,CAAyB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAAE,SAAOA,IAAI,CAAX;AAAa,EAArD,CAAV;;AAEAvB,GAAEU,IAAF,CAAOQ,GAAP,EAAY,UAASM,IAAT,EAAc;AACzB;AACA,MAAIC,iBAAiB,CAArB;;AAEAzB,IAAEU,IAAF,CAAOT,CAAP,EAAU,UAASU,MAAT,EAAiBC,KAAjB,EAAwB;AACjC,OAAKY,OAAOb,MAAR,GAAkB,CAAtB,EAAyB;AACxB;AACA;;AAED,OAAIE,QAAQP,SAASkB,OAAKb,MAAd,IAAwBP,EAAEO,SAAS,CAAX,CAApC;AACA,OAAIE,QAAQY,cAAZ,EAA4B;AAC3BR,MAAEO,IAAF,IAAUZ,KAAV;AACAa,qBAAiBZ,KAAjB;AACA;;AAEDY,oBAAiBX,KAAKC,GAAL,CAASF,KAAT,EAAgBY,cAAhB,CAAjB;AACA,GAZD;;AAcA;;AAEAnB,WAASkB,IAAT,IAAiBC,cAAjB;AACA,EArBD;;AAwBA,KAAIC,IAAIlB,CAAR;AACAmB,SAAQC,GAAR,CAAY,KAAZ;AACA,QAAOF,IAAI,CAAX,EAAc;AACb,MAAIf,SAAUV,EAAEgB,EAAES,CAAF,CAAF,CAAd;AACAC,UAAQC,GAAR,CAAajB,SAAS,GAAtB;AACAe,MAAIA,IAAIf,MAAR;AACA;AACDgB,SAAQC,GAAR,CAAY,KAAZ;;AAEA,QAAOtB,SAASE,CAAT,CAAP;AACA;;AAGDmB,QAAQC,GAAR,CAAY,SAAZ,EAAuBrB,OAAO,EAAP,CAAvB;AACAoB,QAAQC,GAAR,CAAY,UAAZ,EAAwBZ,QAAQ,EAAR,CAAxB","file":"cutRod.js","sourcesContent":["import * as _ from \"lodash\"\n\nvar L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar reverse_L = L.reverse()\nvar P = [1, 5, 8, 9, 10, 17, 17, 20, 24, 30]\nvar costArr = []\nvar costArr2 = []\n\nfunction cutRod(n) {\n\t// max cost for a rod of length n\n\tlet nCost = 0 \n\n\t// console.log(\"calculating cost for length:\", n)\n\n\tif (n == 0) \n\t\treturn 0\n\n\tif (costArr[n] != null && costArr[n] > 0) {\n\t\treturn costArr[n]\n\t}\n\n\t_.each(L, function(length, index) {\n\n\t\tif ((n - length) < 0 ) {\n\t\t\treturn\n\t\t}\t\n\n\t\t// cost of cutting the rod at i \n\t\tlet iCost = P[length-1] + cutRod(n-length)\n\n\t\tnCost = Math.max(nCost, iCost)\n\n\t\t// console.log(\"iCost:\" + iCost + \" price:\" + P[length-1] + \" nCost:\" + nCost)\n\t})\n\n\tcostArr[n] = nCost\n\n\treturn nCost\n}\n\n\n\nfunction cutRod2(n) {\n\tcostArr2[0] = 0\n\tlet S = []\n\n\tlet arr = new Array(n).fill(0).map(function(x,i){ return i + 1})\n\n\t_.each(arr, function(size){\n\t\t// get the max revenue for a rod of size <size>\n\t\tlet maxCostForSize = 0\n\n\t\t_.each(L, function(length, index) {\n\t\t\tif ((size - length) < 0) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlet iCost = costArr2[size-length] + P[length - 1]\n\t\t\tif (iCost > maxCostForSize) {\n\t\t\t\tS[size] = index\n\t\t\t\tmaxCostForSize = iCost\n\t\t\t}\n\n\t\t\tmaxCostForSize = Math.max(iCost, maxCostForSize) \n\t\t})\n\n\t\t// console.log(\" size:\" + size + \" max cost:\" + maxCostForSize)\n\n\t\tcostArr2[size] = maxCostForSize\n\t})\n\n\n\tlet k = n\n\tconsole.log(\" { \")\n\twhile (k > 0) {\n\t\tlet length  = L[S[k]]\n\t\tconsole.log( length + \" \")\n\t\tk = k - length\n\t} \n\tconsole.log(\" } \")\n\n\treturn costArr2[n]\n}\n\n\nconsole.log(\"cutRod:\", cutRod(22))\nconsole.log(\"cutRod2:\", cutRod2(22))"]}