{"version":3,"sources":["../../epi/strings/caseConverter.js"],"names":["_","toCamelCase","str","length","tokenArr","split","firstToken","each","value","index","charAt","toUpperCase","substr","join","toSnakeCase"],"mappings":";;AAAA;;IAAYA,C;;;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAT,CAAqBC,GAArB,EAA0B;;AAEzB,KAAI,OAAOA,GAAP,IAAe,WAAnB,EAAgC;AAC/B,SAAO,IAAP;AACA;;AAED,KAAIA,IAAIC,MAAJ,IAAc,CAAlB,EAAqB;AACpB,SAAO,IAAP;AACA;;AAED,KAAIC,WAAWF,IAAIG,KAAJ,CAAU,GAAV,KAAkB,EAAjC;;AAEA,KAAIC,aAAa,KAAjB;;AAEAN,GAAEO,IAAF,CAAOH,QAAP,EAAiB,UAAUI,KAAV,EAAiBC,KAAjB,EAAwB;;AAExC,MAAID,MAAML,MAAN,GAAe,CAAnB,EAAsB;AACrB,UAAOC,SAASK,KAAT,CAAP;AACA;AACA;;AAED,MAAI,CAACH,UAAL,EAAiB;AAChBA,gBAAa,IAAb;AACA;AACA;;AAED;AACAF,WAASK,KAAT,IAAkBD,MAAME,MAAN,CAAa,CAAb,EAAgBC,WAAhB,KAAgCH,MAAMI,MAAN,CAAa,CAAb,CAAlD;AACA,EAdD;;AAgBA,QAAOR,SAASS,IAAT,CAAc,EAAd,CAAP;AACA;;AAED;AACA;AACA;AACA,SAASC,WAAT,CAAqBZ,GAArB,EAA0B,CAAE","file":"caseConverter.js","sourcesContent":["import * as _ from \"lodash\"\n\n//  str = \"this_is_a_test\"\n// \n// \n//  Test cases:\n//  - null string , string of length 0\n//  - invalid snake case . escape \"_\"\n//  - invalid case trim any leading underscores\n//  - handle character that do not have upper  case  { - , 0-9}\n//  \nfunction toCamelCase(str) {\n\n\tif (typeof(str) == \"undefined\") {\n\t\treturn null\n\t}\n\n\tif (str.length == 0) {\n\t\treturn null;\n\t}\n\n\tvar tokenArr = str.split(\"_\") || [];\n\n\tvar firstToken = false;\n\n\t_.each(tokenArr, function (value, index) {\n\n\t\tif (value.length < 1) {\n\t\t\tdelete tokenArr[index];\n\t\t\treturn;\n\t\t}\n\n\t\tif (!firstToken) {\n\t\t\tfirstToken = true;\n\t\t\treturn;\n\t\t}\n\n\t\t// iterate to the first char \n\t\ttokenArr[index] = value.charAt(0).toUpperCase() + value.substr(1);\n\t});\n\n\treturn tokenArr.join(\"\");\n}\n\n// \n// str = \"thisIsATest\"\n// \nfunction toSnakeCase(str) {}"]}